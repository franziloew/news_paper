select(-freq) %>%
bind_rows(frequency) %>%
left_join(., topics.df, by = "topic")
freq %>%
sample_n(10)
# StmOut$theta is a Matrix that contains the topic-probability distribution for each document (14936x50)
# By taking the mean value of each column, we get the expected probability for each topic within the whole corpus.
frequency <- as.data.frame(colMeans(stmOut$theta)) %>%
transmute(
site = "overall",
topic = as.numeric(topics[,1]),
frequency = colMeans(stmOut$theta)
)
head(frequency)
# create the df for topic 1.
freq <- tapply(stmOut$theta[,1], stmOut$settings$covariates$betaindex, mean)
freq <- as.data.frame(freq) %>%
mutate(site=stmOut$settings$covariates$yvarlevels,
topic = 1)
# apply to all the other topics
for(i in 2:k) {
freq1 <- tapply(stmOut$theta[,i], stmOut$settings$covariates$betaindex, mean)
freq1 <- as.data.frame(freq1) %>%
transmute(site=stmOut$settings$covariates$yvarlevels,
topic = i,
freq = freq1)
freq <- rbind(freq, freq1)
}
# combine with topic names
freq <- freq %>%
mutate(frequency = freq) %>%
select(-freq) %>%
bind_rows(frequency) %>%
left_join(., topics.df, by = "topic")
freq %>%
sample_n(10)
colnames(freq)
freq %>%
filter(site == "overall") %>%
ggplot(aes(x=reorder(topic_name, frequency), y=frequency)) +
geom_col(fill=col[3], alpha=0.8) +
coord_flip() +
labs(x="", y="expected frequency") +
theme(axis.text.x = element_text(size=8),
axis.text.y = element_text(size=9),
axis.title = element_text(size=10))
freq %>%
arrange(desc(frequency), .by_group = TRUE)
freq %>%
arrange(desc(frequency))
freq %>%
group_by(site) %>%
arrange(desc(frequency))
freq %>%
arrange(desc(frequency), site)
freq %>%
arrange(desc(frequency), site) %>%
mutate(order = row_number())
freq %>%
filter(site == "overall") %>%
arrange(desc(frequency)) %>%
mutate(order = row_number())
# StmOut$theta is a Matrix that contains the topic-probability distribution for each document (14936x50)
# By taking the mean value of each column, we get the expected probability for each topic within the whole corpus.
overall_freq <- as.data.frame(colMeans(stmOut$theta)) %>%
transmute(
site = "overall",
topic = as.numeric(topics[,1]),
frequency = colMeans(stmOut$theta)
)
head(overall_freq)
# StmOut$theta is a Matrix that contains the topic-probability distribution for each document (14936x50)
# By taking the mean value of each column, we get the expected probability for each topic within the whole corpus.
overall_freq <- as.data.frame(colMeans(stmOut$theta)) %>%
arrange(desc(frequency))
# StmOut$theta is a Matrix that contains the topic-probability distribution for each document (14936x50)
# By taking the mean value of each column, we get the expected probability for each topic within the whole corpus.
overall_freq <- as.data.frame(colMeans(stmOut$theta)) %>%
arrange(desc(colMeans(stmOut$theta)))
transmute(
site = "overall",
topic = as.numeric(topics[,1]),
frequency = colMeans(stmOut$theta),
order = row_number()
)
# StmOut$theta is a Matrix that contains the topic-probability distribution for each document (14936x50)
# By taking the mean value of each column, we get the expected probability for each topic within the whole corpus.
overall_freq <- as.data.frame(colMeans(stmOut$theta)) %>%
arrange(desc(colMeans(stmOut$theta))) %>%
transmute(
site = "overall",
topic = as.numeric(topics[,1]),
frequency = colMeans(stmOut$theta),
order = row_number()
)
head(overall_freq)
# StmOut$theta is a Matrix that contains the topic-probability distribution for each document (14936x50)
# By taking the mean value of each column, we get the expected probability for each topic within the whole corpus.
overall_freq <- as.data.frame(colMeans(stmOut$theta)) %>%
transmute(
site = "overall",
topic = as.numeric(topics[,1]),
frequency = colMeans(stmOut$theta)
) %>%
arrange(desc(frequency))
head(overall_freq)
# StmOut$theta is a Matrix that contains the topic-probability distribution for each document (14936x50)
# By taking the mean value of each column, we get the expected probability for each topic within the whole corpus.
overall_freq <- as.data.frame(colMeans(stmOut$theta)) %>%
transmute(
site = "overall",
topic = as.numeric(topics[,1]),
frequency = colMeans(stmOut$theta)
) %>%
arrange(desc(frequency))%>%
mutate(order = row_number())
head(overall_freq)
# create the df for topic 1.
freq <- tapply(stmOut$theta[,1], stmOut$settings$covariates$betaindex, mean)
freq <- as.data.frame(freq) %>%
mutate(site=stmOut$settings$covariates$yvarlevels,
topic = 1)
# apply to all the other topics
for(i in 2:k) {
freq1 <- tapply(stmOut$theta[,i], stmOut$settings$covariates$betaindex, mean)
freq1 <- as.data.frame(freq1) %>%
transmute(site=stmOut$settings$covariates$yvarlevels,
topic = i,
freq = freq1)
freq <- rbind(freq, freq1)
}
# combine with topic names
freq <- freq %>%
mutate(frequency = freq) %>%
select(-freq) %>%
bind_rows(frequency) %>%
left_join(., topics.df, by = "topic")
freq %>%
sample_n(10)
# combine with topic names
freq <- freq %>%
mutate(frequency = freq) %>%
select(-freq) %>%
bind_rows(overall_freq) %>%
left_join(., topics.df, by = "topic")
# create the df for topic 1.
freq <- tapply(stmOut$theta[,1], stmOut$settings$covariates$betaindex, mean)
freq <- as.data.frame(freq) %>%
mutate(site=stmOut$settings$covariates$yvarlevels,
topic = 1)
# apply to all the other topics
for(i in 2:k) {
freq1 <- tapply(stmOut$theta[,i], stmOut$settings$covariates$betaindex, mean)
freq1 <- as.data.frame(freq1) %>%
transmute(site=stmOut$settings$covariates$yvarlevels,
topic = i,
freq = freq1)
freq <- rbind(freq, freq1)
}
# combine with topic names
freq <- freq %>%
mutate(frequency = freq) %>%
select(-freq) %>%
bind_rows(overall_freq) %>%
left_join(., topics.df, by = "topic")
freq %>%
sample_n(10)
# create the df for topic 1.
freq <- tapply(stmOut$theta[,1], stmOut$settings$covariates$betaindex, mean)
freq <- as.data.frame(freq) %>%
mutate(site=stmOut$settings$covariates$yvarlevels,
topic = 1)
# apply to all the other topics
for(i in 2:k) {
freq1 <- tapply(stmOut$theta[,i], stmOut$settings$covariates$betaindex, mean)
freq1 <- as.data.frame(freq1) %>%
transmute(site=stmOut$settings$covariates$yvarlevels,
topic = i,
freq = freq1)
freq <- rbind(freq, freq1)
}
# combine with topic names
freq <- freq %>%
mutate(frequency = freq) %>%
select(-freq) %>%
bind_rows(overall_freq %>%
select(-order)) %>%
left_join(., topics.df, by = "topic")
freq %>%
sample_n(10)
# create the df for topic 1.
freq <- tapply(stmOut$theta[,1], stmOut$settings$covariates$betaindex, mean)
freq <- as.data.frame(freq) %>%
mutate(site=stmOut$settings$covariates$yvarlevels,
topic = 1)
# apply to all the other topics
for(i in 2:k) {
freq1 <- tapply(stmOut$theta[,i], stmOut$settings$covariates$betaindex, mean)
freq1 <- as.data.frame(freq1) %>%
transmute(site=stmOut$settings$covariates$yvarlevels,
topic = i,
freq = freq1)
freq <- rbind(freq, freq1)
}
# combine with topic names
freq <- freq %>%
mutate(frequency = freq) %>%
select(-freq) %>%
bind_rows(overall_freq %>%
select(-order)) %>%
left_join(., topics.df, by = "topic") %>%
left_join(., overall_freq %>% select(topic, order), by="topic")
freq %>%
sample_n(10)
freq %>%
arrange(order) %>&
freq %>%
arrange(order) %>%
sample_n(10)
freq %>%
ggplot(aes(reorder(topic_name,order), freq)) +
geom_col(fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name,order), freq)) +
geom_col(fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
ggplot(aes(reorder(topic_name,order), freq)) +
geom_col(fill = col[3])
freq %>%
arrange(order)
freq %>%
arrange(order) %>%
ggplot(aes(topic_name, frequency)) +
geom_col(fill = col[3])
freq %>%
arrange(order) %>%
ggplot(aes(topic_name, frequency)) +
geom_col(fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
filter(site != "overall") %>%
arrange(order, site) %>%
ggplot(aes(topic_name, frequency)) +
geom_col(fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
filter(site != "overall") %>%
arrange(order, site)
ggplot(aes(reorder(topic_name, order) frequency)) +
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, order) frequency)) +
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, order) frequency)) +
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, order) frequency)) +
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, order) frequency)) +
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, order), frequency)) +
geom_col(fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
?reorder
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, order, desc), frequency)) +
geom_col(fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, order, desc = TRUE), frequency)) +
geom_col(fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, -order), frequency)) +
geom_col(fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
mutate(overall = ifelse(site == "overall", 1, 0)) %>%
ggplot(aes(reorder(topic_name, -order), frequency),
fill = overall) +
geom_col(fill = col[1,3], alpha = 0.7) +
coord_flip() +
facet_wrap(~site, ncol = 8) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
mutate(overall = ifelse(site == "overall", TRUE, FALSE)) %>%
ggplot(aes(reorder(topic_name, -order), frequency),
fill = overall) +
geom_col(fill = col[1,3], alpha = 0.7, show.legend = FALSE) +
coord_flip() +
facet_wrap(~site, ncol = 8) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
mutate(overall = ifelse(site == "overall", TRUE, FALSE)) %>%
ggplot(aes(reorder(topic_name, -order), frequency),
fill = overall) +
geom_col(alpha = 0.7) +
coord_flip() +
facet_wrap(~site, ncol = 8) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
mutate(overall = ifelse(site == "overall", TRUE, FALSE)) %>%
ggplot(aes(reorder(topic_name, -order), frequency),
fill = overall, group = overall) +
geom_col(alpha = 0.7) +
coord_flip() +
facet_wrap(~site, ncol = 8) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
ggplot(aes(reorder(topic_name, -order), frequency)) +
geom_col(alpha = 0.7, fill = col[1]) +
coord_flip() +
facet_wrap(~site, ncol = 8) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, -order), frequency)) +
geom_col(alpha = 0.7, fill = col[1]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
library(patchwork)
p1 <- freq %>%
filter(site == "overall") %>%
ggplot(aes(reorder(topic_name, -order), frequency)) +
geom_col(alpha = 0.7, fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
#axis.text.y = element_blank(),
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
p2 <- freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, -order), frequency)) +
geom_col(alpha = 0.7, fill = col[1]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
axis.text.y = element_blank(),
axis.title = element_text(size=10)) +
labs(x="", y="expected frequency")
p1 + p2
p1 + p2 + plot_layout(widths = c(1,3))
p1 <- freq %>%
filter(site == "overall") %>%
ggplot(aes(reorder(topic_name, -order), frequency)) +
geom_col(alpha = 0.7, fill = col[3]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
axis.text.y = element_text(size=11),
axis.title = element_text(size=10)) +
labs(x=NULL, y=NULL, title="Expected Frequency of Topics")
p2 <- freq %>%
filter(site != "overall") %>%
ggplot(aes(reorder(topic_name, -order), frequency)) +
geom_col(alpha = 0.7, fill = col[1]) +
coord_flip() +
facet_wrap(~site, ncol = 7) +
theme(
axis.text.y = element_blank(),
axis.title = element_text(size=10)) +
labs(x=NULL, y=NULL)
p1 + p2 + plot_layout(widths = c(1,3))
effect <- estimateEffect(c(1:k) ~site, stmOut,
metadata = out$meta, uncertainty = "None")
tables <- vector(mode="list", length = length(effect$topics))
for (i in seq_along(effect$topics)) {
sims <- lapply(effect$parameters[[i]], function(x) stm:::rmvnorm(500, x$est, x$vcov))
sims <- do.call(rbind, sims)
est <- colMeans(sims)
se <- sqrt(apply(sims,2, stats::var))
tval <- est/se
rdf <- nrow(effect$data) - length(est)
p <- 2*stats::pt(abs(tval), rdf, lower.tail = FALSE)
topic <- i
coefficients <- cbind(topic, est, se, tval, p)
rownames(coefficients) <- attr(effect$parameters[[1]][[1]]$est, "names")
colnames(coefficients) <- c("topic", "Estimate", "Std. Error", "t value", "p")
tables[[i]] <- coefficients
}
out1 <- list(call=effect$call, topics=effect$topics, tables=tables)
coeff <- as.data.frame(do.call(rbind,out1$tables))
coeff <- coeff %>%
mutate(parameter = rownames(coeff),
parameter = gsub("site", "", parameter),
signifcant = ifelse(p <= 0.5,"yes","no")) %>%
left_join(., topics.df, by="topic") %>%
mutate(parameter = ifelse(parameter == "welt.de", "DIE WELT", parameter),
parameter = ifelse(parameter == "zeit.de", "ZEIT ONLINE", parameter),
parameter = ifelse(parameter == "focus.de", "FOCUS ONLINE", parameter),
parameter = ifelse(parameter == "spiegel.de", "SPIEGEL ONLINE", parameter),
parameter = ifelse(parameter == "tagesschau.de", "Tagesschau.de", parameter))
p1 <- coeff %>%
filter(topic %in% keep) %>%
filter(parameter != "(Intercept)") %>%
ggplot(aes(x = reorder(topic_name,topic, decreasing=F), y = Estimate, fill=factor(signifcant))) +
geom_col(alpha = 0.8) +
scale_fill_manual(values = col[c(5,3)]) +
scale_x_discrete(position = "top") +
geom_hline(yintercept = 0, linetype = 2,
color = "black") +
coord_flip() +
facet_wrap(~parameter, ncol = 8, scales = "free_x") +
labs(x="", fill="significant at the 5% level") +
theme(legend.position = "top",
axis.text.y = element_text(size=11),
axis.text.x = element_text(angle=90))
p1
keep <- c(1,2,4,10,13,17,20,22,23,26,27,30,32,37,46)
p1 <- coeff %>%
filter(topic %in% keep) %>%
filter(parameter != "(Intercept)") %>%
ggplot(aes(x = reorder(topic_name,topic, decreasing=F), y = Estimate, fill=factor(signifcant))) +
geom_col(alpha = 0.8) +
scale_fill_manual(values = col[c(5,3)]) +
scale_x_discrete(position = "top") +
geom_hline(yintercept = 0, linetype = 2,
color = "black") +
coord_flip() +
facet_wrap(~parameter, ncol = 8, scales = "free_x") +
labs(x="", fill="significant at the 5% level") +
theme(legend.position = "top",
axis.text.y = element_text(size=11),
axis.text.x = element_text(angle=90))
p1
View(coeff)
effect <- estimateEffect(c(1:k) ~site, stmOut,
metadata = out$meta, uncertainty = "Global")
